/*SQL SERVER – Identify Most Resource Intensive Queries*/

	SELECT [schema_name] = s.name,
           table_name = o.name,
           MAX(i1.type_desc) ClusteredIndexorHeap,
           COUNT(i.TYPE)     NoOfNonClusteredIndex,
           p.ROWS
    FROM   sys.indexes i
           RIGHT JOIN sys.objects o
             ON i.[object_id] = o.[object_id]
           INNER JOIN sys.schemas s
             ON o.[schema_id] = s.[schema_id]
           LEFT JOIN sys.partitions p
             ON p.OBJECT_ID = o.OBJECT_ID
                AND p.index_id IN ( 0, 1 )
           LEFT JOIN sys.indexes i1
             ON i.OBJECT_ID = i1.OBJECT_ID
                AND i1.TYPE IN ( 0, 1 )
    WHERE  o.TYPE IN ( 'U' )
    GROUP  BY s.name,
              o.name,
              p.ROWS
    ORDER  BY schema_name,
              table_name 
    

/*SQL SERVER – Identify Numbers of Non Clustered Index on Tables for Entire Database*/

	SELECT COUNT(i.TYPE) NoOfIndex,
           [schema_name] = s.name,
           table_name = o.name
    FROM   sys.indexes i
           INNER JOIN sys.objects o
             ON i.[object_id] = o.[object_id]
           INNER JOIN sys.schemas s
             ON o.[schema_id] = s.[schema_id]
    WHERE  o.TYPE IN ( 'U' )
           AND i.TYPE = 2 --6
    GROUP  BY s.name,
              o.name
    ORDER  BY schema_name,
              table_name 

/*Find Table without Clustered Index – Find Table with no Primary Key*/

	SELECT DISTINCT [TABLE] = Object_name(OBJECT_ID)
    FROM   SYS.INDEXES
    WHERE  INDEX_ID = 0
           AND Objectproperty(OBJECT_ID, 'IsUserTable') = 1
    ORDER  BY [TABLE]
    
    GO 
    


/*Download Missing Index Script with Unused Index Script*/
-- Missing Index Script
-- Original Author: Pinal Dave (C) 2011

	SELECT TOP 25 dm_mid.database_id                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AS DatabaseID,
                  dm_migs.avg_user_impact * ( dm_migs.user_seeks + dm_migs.user_scans )                                                                                                                                                                                                                                                                                                                                                                                                              Avg_Estimated_Impact,
                  dm_migs.last_user_seek                                                                                                                                                                                                                                                                                                                                                                                                                                                             AS Last_User_Seek,
                  Object_name(dm_mid.OBJECT_ID, dm_mid.database_id)                                                                                                                                                                                                                                                                                                                                                                                                                                  AS [TableName],
                  'CREATE INDEX [IX_' + Object_name(dm_mid.OBJECT_ID, dm_mid.database_id) + '_' + REPLACE(REPLACE(REPLACE(Isnull(dm_mid.equality_columns, ''), ', ', '_'), '[', ''), ']', '') + CASE
                                                                                                                                                                                                  WHEN dm_mid.equality_columns IS NOT NULL
                                                                                                                                                                                                       AND dm_mid.inequality_columns IS NOT NULL THEN '_'
                                                                                                                                                                                                  ELSE ''
                                                                                                                                                                                                END + REPLACE(REPLACE(REPLACE(Isnull(dm_mid.inequality_columns, ''), ', ', '_'), '[', ''), ']', '') + ']' + ' ON ' + dm_mid.statement + ' (' + Isnull (dm_mid.equality_columns, '') + CASE
                                                                                                                                                                                                                                                                                                                                                                                        WHEN dm_mid.equality_columns IS NOT NULL
                                                                                                                                                                                                                                                                                                                                                                                             AND dm_mid.inequality_columns IS NOT NULL THEN ','
                                                                                                                                                                                                                                                                                                                                                                                        ELSE ''
                                                                                                                                                                                                                                                                                                                                                                                      END + Isnull (dm_mid.inequality_columns, '') + ')' + Isnull (' INCLUDE (' + dm_mid.included_columns + ')', '') AS Create_Statement
    FROM   sys.dm_db_missing_index_groups dm_mig
           INNER JOIN sys.dm_db_missing_index_group_stats dm_migs
             ON dm_migs.group_handle = dm_mig.index_group_handle
           INNER JOIN sys.dm_db_missing_index_details dm_mid
             ON dm_mig.index_handle = dm_mid.index_handle
    WHERE  dm_mid.database_ID = Db_id()
    ORDER  BY Avg_Estimated_Impact DESC
    
    GO 
    

/*Here is the script which will give you numbers of non clustered indexes on any table in entire database.*/

	SELECT COUNT(i.TYPE) NoOfIndex,
           [schema_name] = s.name,
           table_name = o.name
    FROM   sys.indexes i
           INNER JOIN sys.objects o
             ON i.[object_id] = o.[object_id]
           INNER JOIN sys.schemas s
             ON o.[schema_id] = s.[schema_id]
    WHERE  o.TYPE IN ( 'U' )
           AND i.TYPE = 2
    GROUP  BY s.name,
              o.name
    ORDER  BY schema_name,
              table_name 
    


/****************************Unused Index Script*******************/

-- Original Author: Pinal Dave (C) 2011
	SELECT TOP 25 o.name                                                                                                          AS ObjectName,
                  i.name                                                                                                          AS IndexName,
                  i.index_id                                                                                                      AS IndexID,
                  dm_ius.user_seeks                                                                                               AS UserSeek,
                  dm_ius.user_scans                                                                                               AS UserScans,
                  dm_ius.user_lookups                                                                                             AS UserLookups,
                  dm_ius.user_updates                                                                                             AS UserUpdates,
                  p.TableRows,
                  'DROP INDEX ' + Quotename(i.name) + ' ON ' + Quotename(s.name) + '.' + Quotename(Object_name(dm_ius.OBJECT_ID)) AS 'drop statement'
    FROM   sys.dm_db_index_usage_stats dm_ius
           INNER JOIN sys.indexes i
             ON i.index_id = dm_ius.index_id
                AND dm_ius.OBJECT_ID = i.OBJECT_ID
           INNER JOIN sys.objects o
             ON dm_ius.OBJECT_ID = o.OBJECT_ID
           INNER JOIN sys.schemas s
             ON o.schema_id = s.schema_id
           INNER JOIN (SELECT SUM(p.ROWS) TableRows,
                              p.index_id,
                              p.OBJECT_ID
                       FROM   sys.partitions p
                       GROUP  BY p.index_id,
                                 p.OBJECT_ID) p
             ON p.index_id = dm_ius.index_id
                AND dm_ius.OBJECT_ID = p.OBJECT_ID
    WHERE  Objectproperty(dm_ius.OBJECT_ID, 'IsUserTable') = 1
           AND dm_ius.database_id = Db_id()
           AND i.type_desc = 'nonclustered'
           AND i.is_primary_key = 0
           AND i.is_unique_constraint = 0
    ORDER  BY ( dm_ius.user_seeks + dm_ius.user_scans + dm_ius.user_lookups ) ASC
    
    GO 
    

    




